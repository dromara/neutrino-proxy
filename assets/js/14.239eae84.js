(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{379:function(t,a,s){"use strict";s.r(a);var r=s(14),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"什么是域名映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是域名映射"}},[t._v("#")]),t._v(" 什么是域名映射？")]),t._v(" "),a("p",[t._v("域名映射是将指定端口映射绑定到某一个子域名上，通过直接访问域名的方式，达到访问被代理服务的目的。\n支持维护多个主域名并为多个主域名配置不同的子域名实现域名映射。")]),t._v(" "),a("h1",{attrs:{id:"域名映射能解决什么问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#域名映射能解决什么问题"}},[t._v("#")]),t._v(" 域名映射能解决什么问题？")]),t._v(" "),a("ul",[a("li",[t._v("1、当服务端端口需要经常变动的时候，可以通过固定域名的方式，使得开发调试能够长期稳定的进行，不用每次更改访问地址。")]),t._v(" "),a("li",[t._v("2、使用域名可以使用有意义的名称方便记忆")]),t._v(" "),a("li",[t._v("3、调试某些第三方回调时，回调地址不能填写IP+端口的形式，此时需要域名来完成")])]),t._v(" "),a("h1",{attrs:{id:"域名映射的大致流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#域名映射的大致流程"}},[t._v("#")]),t._v(" 域名映射的大致流程？")]),t._v(" "),a("blockquote",[a("p",[t._v("例如你有一个已备案的域名：asgc.fun，以下是使用域名映射的大致流程")])]),t._v(" "),a("h2",{attrs:{id:"情况1-代理服务端使用80端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况1-代理服务端使用80端口"}},[t._v("#")]),t._v(" 情况1：代理服务端使用80端口")]),t._v(" "),a("ul",[a("li",[t._v("1、DNS解析配置泛域名解析 proxy.asgc.fun 指向代理服务端IP")]),t._v(" "),a("li",[t._v("2、服务端管理后台域名管理新建域名，如：asgc.fun")]),t._v(" "),a("li",[t._v("3、服务端管理后台新建端口映射，协议选择：HTTP(S)，选择主域名并设置好子域名，如：test1.proxy")]),t._v(" "),a("li",[t._v("4、配置好客户端并启动，代理映射完成")]),t._v(" "),a("li",[t._v("5、通过访问: http://test1.proxy.asgc.fun 实现访问被代理服务")])]),t._v(" "),a("h2",{attrs:{id:"情况2-代理服务端不使用80端口-80端口被nginx占用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况2-代理服务端不使用80端口-80端口被nginx占用"}},[t._v("#")]),t._v(" 情况2：代理服务端不使用80端口，80端口被nginx占用")]),t._v(" "),a("blockquote",[a("p",[t._v("假设代理服务端使用82作为HTTP代理端口")])]),t._v(" "),a("ul",[a("li",[t._v("1、DNS解析配置泛域名解析 proxy.asgc.fun 指向代理服务端IP")]),t._v(" "),a("li",[t._v("2、nginx 80端口下将 *.proxy.asgc.fun 请求转到82端口，并附带原有请求头（特别是"),a("code",[t._v("Host")]),t._v("）")]),t._v(" "),a("li",[t._v("3、服务端管理后台域名管理新建域名，如：asgc.fun")]),t._v(" "),a("li",[t._v("4、服务端管理后台新建端口映射，协议选择：HTTP(S)，设置好子域名，如：test1.proxy")]),t._v(" "),a("li",[t._v("5、配置好客户端并启动，代理映射完成")]),t._v(" "),a("li",[t._v("6、通过访问: http://test1.proxy.asgc.fun 实现访问被代理服务")])]),t._v(" "),a("h1",{attrs:{id:"所有的代理映射都能绑定域名吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有的代理映射都能绑定域名吗"}},[t._v("#")]),t._v(" 所有的代理映射都能绑定域名吗？")]),t._v(" "),a("p",[t._v("不行的。之所以能实现域名绑定，原因是HTTP请求附带了Host请求头，包含了请求的域名信息，代理服务端能根据请求的域名做分发。而TCP协议本身并不包含域名，因此无法实现。\n所以，目前只有HTTP（涵盖HTTPS）协议能支持。")]),t._v(" "),a("h1",{attrs:{id:"域名映射支持https吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#域名映射支持https吗"}},[t._v("#")]),t._v(" 域名映射支持HTTPS吗？")]),t._v(" "),a("p",[t._v("支持的。在服务端管理后台-域名管理中新建域名并上传域名对应的服务器证书，可以选择强制HTTPS，这样会拦截所有HTTP请求，只支持通过HTTPS访问。\n如果上传后的证书仍不支持HTTPS访问，请确保上传证书有效并且和配置的主域名或完整域名映射匹配。")]),t._v(" "),a("h1",{attrs:{id:"上传服务器证书的文件有要求吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传服务器证书的文件有要求吗"}},[t._v("#")]),t._v(" 上传服务器证书的文件有要求吗？")]),t._v(" "),a("p",[t._v("有的。目前只支持通过jks文件上传服务器证书，jks文件中只包含服务器证书（如：.cer文件），并设置密码。")]),t._v(" "),a("h1",{attrs:{id:"代理服务端使用非80端口时-nginx配置示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理服务端使用非80端口时-nginx配置示例"}},[t._v("#")]),t._v(" 代理服务端使用非80端口时，nginx配置示例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('server {\n    listen       80;\n    # 此处配不配貌似不影响\n    server_name  localhost *.neutrino-proxy.asgc.fun;\n\n    location / {\n        if ($http_host ~* "(.*?).neutrino-proxy.asgc.fun") {\n           # 转发到代理服务端HTTP代理端口\n           proxy_pass http://localhost:8899; \n        }\n\n        tcp_nodelay     on;\n        proxy_set_header Host            $host;\n        proxy_set_header X-Real-IP       $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上\n\n    root   html;\n        index  index.html index.htm;\n    }\n}\n')])])])])}),[],!1,null,null,null);a.default=_.exports}}]);