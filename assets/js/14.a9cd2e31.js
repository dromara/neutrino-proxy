(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{371:function(t,v,_){"use strict";_.r(v);var s=_(14),a=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"端口池"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#端口池"}},[t._v("#")]),t._v(" 端口池")]),t._v(" "),v("blockquote",[v("p",[t._v("端口池用于统一、集中管理服务端代理对外开放的代理端口。")])]),t._v(" "),v("ul",[v("li",[t._v("1、这里不包含服务端启动本身所需要的一些特殊端口，如：WEB端口、对客户端开放的端口(9000、9002)、HTTP代理端口。")]),t._v(" "),v("li",[t._v("2、端口映射里所有的服务端端口，都包含在端口池内。方便了统一管理、安全组/防火墙设置。")])]),t._v(" "),v("h1",{attrs:{id:"端口池分组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#端口池分组"}},[t._v("#")]),t._v(" 端口池分组")]),t._v(" "),v("blockquote",[v("p",[t._v("顾名思义，它是对端口池下的端口做了一个划分。")])]),t._v(" "),v("ul",[v("li",[t._v("1、允许同一个分组内的端口拥有特定的归属。比如：全局分组下的端口，进行代理时所有用户共享，这里极端情况下涉及到端口抢占问题。而用户分组下的端口，归属于某一个特定的用户。\nLicense分组下的端口，归属于某一个特定的License。")]),t._v(" "),v("li",[t._v("2、该划分，使得特定的用户、License能够独占一部分端口。为后续更多场景下代理，避免端口被占用提供了支持。")])]),t._v(" "),v("h1",{attrs:{id:"端口映射"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#端口映射"}},[t._v("#")]),t._v(" 端口映射")]),t._v(" "),v("blockquote",[v("p",[t._v("当前版本代理功能的基本单元。")])]),t._v(" "),v("ul",[v("li",[t._v("1、该映射由一个四元组唯一标识(代理服务端IP、代理服务端端口、被代理服务局域网IP、被代理服务端口)。")]),t._v(" "),v("li",[t._v("2、由于本项目为个人版，代理服务端仅支持一个节点，所以四元组中的服务端IP可以省略，不在端口映射管理中体现。")]),t._v(" "),v("li",[t._v("3、代理成功的情况下，通过访问代理服务端IP+端口，可以达到访问内网被代理服务IP+端口的同等效果")]),t._v(" "),v("li",[t._v("4、例如：本地启动一个socket服务，需要和异地的同事联调。可以通过中微子代理jetbrains客户端插件（后续会推出）将本地socket端口代理至公网。同事通过访问代理服务端公网IP+端口进行调试。")])]),t._v(" "),v("h1",{attrs:{id:"基础端口说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础端口说明"}},[t._v("#")]),t._v(" 基础端口说明")]),t._v(" "),v("ul",[v("li",[t._v("WEB端口：服务端API、后台管理访问端口，默认为：8888")]),t._v(" "),v("li",[t._v("服务端等待客户端连接的端口，非SSL：默认9000，SSL端口：默认9002（若不需要SSL支持，可不配置SSL端口）")]),t._v(" "),v("li",[t._v("HTTP代理端口：默认80，用于域名映射，若无需域名映射，可以忽略。")])])])}),[],!1,null,null,null);v.default=a.exports}}]);