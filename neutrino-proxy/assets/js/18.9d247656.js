(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{383:function(e,_,l){"use strict";l.r(_);var v=l(14),a=Object(v.a)({},(function(){var e=this,_=e._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"_1-1-启动日志包含not-found-license-key-config相关字样"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-启动日志包含not-found-license-key-config相关字样"}},[e._v("#")]),e._v(" 1.1. 启动日志包含"),_("code",[e._v("not found license-key config")]),e._v("相关字样")]),e._v(" "),_("p",[e._v("出现这种情况，说明客户端没获取到配置的license，可按如下检查：")]),e._v(" "),_("ul",[_("li",[e._v("客户端是否有配置app.yml，app.yml中是否有配置"),_("code",[e._v("license-key")])]),e._v(" "),_("li",[e._v("客户端启动参数是否指定app.yml配置，若未指定客户端不会加载任何jar外部的配置文件")]),e._v(" "),_("li",[e._v("客户端启动参数指定的配置文件路径是否正确？如："),_("code",[e._v("java -jar neutrino-proxy-client.jar config=app.yml")]),e._v("，代表"),_("code",[e._v("app.yml")]),e._v("文件与jar在同级别目录下，如果不在同级别目录，请使用绝对/相对路径指定")]),e._v(" "),_("li",[e._v("除此之外license还可以用以下方法直接在启动参数中指定：\n"),_("ul",[_("li",[_("code",[e._v("java -jar -DLICENSE_KEY=xxxx -DSERVER_IP=x.x.x.x -DSERVER_PORT=9000 -DSSL_ENABLE=false neutrino-proxy-client.jar")])]),e._v(" "),_("li",[_("code",[e._v("java -jar neutrino-proxy-client.jar serverIp=x.x.x.x serverPort=9000 sslEnable=false licenseKey=xxxx")])])])])]),e._v(" "),_("h2",{attrs:{id:"_1-2-配置文件确定都已经配置-且启动参数正确指定了-但是没有出现认证成功日志"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-配置文件确定都已经配置-且启动参数正确指定了-但是没有出现认证成功日志"}},[e._v("#")]),e._v(" 1.2. 配置文件确定都已经配置，且启动参数正确指定了，但是没有出现"),_("code",[e._v("认证成功日志")])]),e._v(" "),_("ul",[_("li",[e._v("确认客户端配置的"),_("code",[e._v("server-ip")]),e._v("，必须是服务端所在机器的ip，且保证客户端所在机器能正常ping通")]),e._v(" "),_("li",[e._v("确认客户端配置的"),_("code",[e._v("server-port")]),e._v("与"),_("code",[e._v("ssl-enable")]),e._v("，默认情况应配置为9000、false或9002、true，除非服务端app.yml有改动隧道对外端口")]),e._v(" "),_("li",[e._v("确认服务端对外的9000、9002端口是否已经放开")]),e._v(" "),_("li",[e._v("服务端如果采用docker部署，需要确保容器的9000、9002端口映射到宿主机")])])])}),[],!1,null,null,null);_.default=a.exports}}]);